:ruby
  # Arguments:
  # * events => Event record scope
  # * start_date => first date to include in calendar view
  # * end_date => last date to include in calendar view

  num_slots = 5
  today = Time.zone.today

  # ensure dates start and end on week boundaries and are dates, not times
  start_date = start_date.to_date.beginning_of_week(:sunday)
  end_date = end_date.to_date.end_of_week(:sunday)

  # creates empty event slots for each day we will show on the calendar
  days = Hash[(start_date..end_date).map{|date| [date, Array.new(num_slots)] }]

  # FIXME: re-ordering by start_time should be assumed to happen in controller (but isn't?)
  # FIXME: would also be nice to order by 'start_date asc, end_date desc' so we can be sure
  # multi-day events are at top of each days' event list
  events.reorder('start_time asc, end_time desc').each do |event|
    event_start, event_end = event.start_date, event.end_date

    # really long events are probably mistyped, spam or otherwise annoying
    # FIXME: prevent long events from being created in the first place?
    next if event_end - event_start > 7 # days

    # event start_time or end_time must fall within calendar date range
    next if event_start > end_date || event_end < start_date

    event_pos = nil # cache position so multi-day events use same slot
    (event_start..event_end).each do |date|
      # skip any days that wander outside our calendar range
      day = days[date] or next

      if event_pos
        # event already started on a previous day
        if date.wday == 0 # sunday
          # at start of week, redefine event on calendar
          day[event_pos] = event
        else
          # event flows into this day, reserve so other events can't take
          day[event_pos] = false
        end
      elsif event_pos = day.find_index(&:nil?) || day.count
        # found empty slot or created a new slot if needed
        day[event_pos] = event
      end
    end
  end

.week-header
  - 0.upto(6) do |wday|
    .day-header= t('date.abbr_day_names')[wday]
- days.each_slice(7) do |week|
  - month_change = week.last[0].day <= 7
  .week{:class => (month_change ? 'w1' : '')}
    - week.each do |day,events|
      - if day.day == 1
        .month-header
          .month= t('date.month_names')[day.month]
          .year= day.year
      - new_events = events.select {|e| e.present? && e.start_date == day && e.end_date >= today }
      .day{:class => "d#{day.day} wday#{day.wday} #{day == today ? 'today' : ''} #{new_events.none? ? 'no-new-events' : ''}"}
        .date
          .wday= t('date.day_names')[day.wday]
          .month= t('date.abbr_month_names')[day.month]
          .dom= day.day
          .year= day.year
        - events.each_with_index do |event,idx|
          - if event
            - span = [event.days(day), (7 - day.wday)].min
            .slot{:class => "s#{span} #{idx > num_slots-2 && events.count > num_slots ? 'extra' : ''}"}
              .event{'data-event-id' => event.id, :class => "#{(event.start_date == day ? 'new-event' : '')} #{event.end_date < today ? 'past' : ''}"}
                .event-title= link_to event.title, event_path(:id => event.id)
                .event-organization
                  - if event.organization
                    .organization-label= t('.organization_label')
                    = link_to event.organization.name, organization_path(:id => event.organization.id)
                .event-time-abs= normalize_time(event.start_time, event.end_time, :format => :text)
                .event-time-rel= normalize_time(event.start_time, event.end_time, :context => event.start_date, :format => :text)
                .event-venue
                  - if event.venue
                    .venue-label= t('.venue_label')
                    .venue-at= t('.venue_at')
                    = link_to event.venue.title, venue_path(:id => event.venue.id)
                .event-description= Loofah::Helpers::strip_tags(event.description) if event.description
                .event-topics-types
                  - event.topics.each do |topic|
                    = link_to topic.name, '#', :class => 'topic'
                  - event.types.each do |type|
                    = link_to type.name, '#', :class => 'type'
          - else
            .slot.empty-slot{:class => (idx > num_slots-2 && events.count > num_slots ? 'extra' : '')}
        - if (more_events = events.from(num_slots)).any?
          .show-more= link_to t('.show_more', :count => more_events.count+1), '#'
